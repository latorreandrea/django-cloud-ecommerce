"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # Add os import for os.path.join
import google.cloud.secretmanager as secretmanager
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

### SET UP FOR GOOGLE CLOUD RUN ###
# Determine if we're running on Google Cloud Run
def is_running_on_gcp():
    return os.environ.get('GAE_ENV', '').startswith('standard') or \
           os.environ.get('K_SERVICE', None) is not None

# Secret Key handling
if is_running_on_gcp():
    # Running on Cloud Run - get secrets from Secret Manager
    PROJECT_ID = os.environ.get('PROJECT_ID')
    try:
        client = secretmanager.SecretManagerServiceClient()
        name = f"projects/{PROJECT_ID}/secrets/django-secret-key/versions/latest"
        response = client.access_secret_version(request={"name": name})
        SECRET_KEY = response.payload.data.decode("UTF-8")
    except Exception as e:
        print(f"Error accessing Secret Manager: {e}")
        # Fallback to environment variable if Secret Manager fails
        SECRET_KEY = os.environ.get('SECRET_KEY', 'fallback-insecure-key-for-emergencies')
else:
    # Local development - use the hard-coded key
    SECRET_KEY = 'django-insecure-**ufr+c&*byb8zx64$1ih+ww2db665bkb2hrrx!gr7l!w9h*+&'

# Debug settings
DEBUG = not is_running_on_gcp()  # True in local dev, False in production

# Update ALLOWED_HOSTS for Cloud Run
ALLOWED_HOSTS = ['localhost', '127.0.0.1']
if is_running_on_gcp():
    ALLOWED_HOSTS.extend([
        '.run.app', 'blunttee.com', 'www.blunttee.com',  # All Cloud Run URLs
        os.environ.get('ALLOWED_HOST', ''),  # Custom domain if specified
    ])



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Developed apps
    'home',
    # Third-party apps
    'storages'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

if DEBUG:
    # Developing:  Django static system
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
else:
    # Production: Cloud Storage
    GS_BUCKET_NAME = 'blunttee'
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'

# Media files (user uploaded content)
if DEBUG:
    MEDIA_URL = 'media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
else:
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
