"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # Add os import for os.path.join
import google.cloud.secretmanager as secretmanager
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

### SET UP FOR GOOGLE CLOUD RUN ###
# Determine if we're running on Google Cloud Run
def is_running_on_gcp():
    return os.environ.get('GAE_ENV', '').startswith('standard') or \
           os.environ.get('K_SERVICE', None) is not None

if is_running_on_gcp():
    # Use PROJECT_ID as GCP project ID
    PROJECT_ID = os.environ.get('PROJECT_ID')
    try:
        client = secretmanager.SecretManagerServiceClient()
        # Get SECRET_KEY from secret blunttee_PROJECT_ID
        secret_key_secret = f"projects/{PROJECT_ID}/secrets/blunttee_PROJECT_ID/versions/latest"
        secret_key_response = client.access_secret_version(request={"name": secret_key_secret})
        SECRET_KEY = secret_key_response.payload.data.decode("UTF-8")
        # Get DATABASE_URL from secret blunttee_dj_database_url
        db_url_secret = f"projects/{PROJECT_ID}/secrets/blunttee_dj_database_url/versions/latest"
        db_url_response = client.access_secret_version(request={"name": db_url_secret})
        DATABASE_URL = db_url_response.payload.data.decode("UTF-8")
    except Exception as e:
        print(f"Error accessing Secret Manager: {e}")
        SECRET_KEY = os.environ.get('SECRET_KEY', 'fallback-insecure-key-for-emergencies')
        DATABASE_URL = os.environ.get('DATABASE_URL', '')
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Local development
    SECRET_KEY = 'django-insecure-**ufr+c&*byb8zx64$1ih+ww2db665bkb2hrrx!gr7l!w9h*+&'
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Debug settings
DEBUG = not is_running_on_gcp()  # True in local dev, False in production

# Update ALLOWED_HOSTS for Cloud Run
ALLOWED_HOSTS = ['localhost', '127.0.0.1']
if is_running_on_gcp():
    ALLOWED_HOSTS.extend([
        '.run.app', 'blunttee.com', 'www.blunttee.com',  # All Cloud Run URLs
        os.environ.get('ALLOWED_HOST', ''),  # Custom domain if specified
    ])



# Application definition

INSTALLED_APPS = [
    'django.contrib.sites',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # # Social providers
    # 'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount.providers.facebook',
    # 'allauth.socialaccount.providers.twitter',
    # Developed apps
    'home',
    'products',
    'users',
    # Third-party apps
    'storages',
    # Crispy Forms
    'crispy_forms',
    'crispy_bootstrap5',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # allauth middleware
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

ACCOUNT_LOGIN_METHODS = {'username', 'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'email2*', 'username*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_USERNAME_MIN_LENGTH = 5

LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

WSGI_APPLICATION = 'ecommerce.wsgi.application'



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

if DEBUG:
    # Developing:  Django static system
    STATIC_URL = '/static/'
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
else:
    # Production: Cloud Storage
    GS_BUCKET_NAME = 'blunttee'
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/static/'

# Media files (user uploaded content)
if DEBUG:
    MEDIA_URL = 'media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
else:
    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email settings
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    DEFAULT_FROM_EMAIL = 'BluntTee@example.com'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_USE_TLS = True
    EMAIL_PORT = 587
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_HOST_USER = os.environ.get('blunttee_EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('blunttee_EMAIL_HOST_PASS')
    DEFAULT_FROM_EMAIL = os.environ.get('blunttee_EMAIL_HOST_USER')